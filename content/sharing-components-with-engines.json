{"data":{"type":"contents","id":"sharing-components-with-engines","attributes":{"html":"<p>Is this what I'm looking for?\nYou have at least one engine and you want to share components from your parent\napp without having an in-repo-addon to share the common components. You might\nalso want fine-grain control over how the components are setup and what data\ncomes over. Most likely these are not UI-only components, but they deal with\nyour app data and business logic.</p>\n<p>I'm hear to tell you that it's possible, but it's a manual process that involves\nusing some \"advanced\" concepts that Ember introduced in v2. So lets dig in and\nsee what that looks like.</p>\n<p>What it looks like\nI'm going to jump to the end and show you the result, then we'll go back and\ncover how to implement this in your app.</p>\n<p>We start with the template in your engine:</p>\n<p>It looks very simple, notice that the above is a component, and it's being\nrendered using dot notation off of a share  service.</p>\n<p>Now that we see how it's used, lets see how it's setup in our parent app.</p>\n<p>The above uses a custom component called share-ui  which acts like a proxy to\nour share  service. Then we use the built-in hash  helper which basically just\ncreates an object and passes it as an \"argument\" to our component.</p>\n<p>You should alos notice that we use the component  helper, which lets us\ndynamically setup a component without calling it. In the above example we passed\nthe user  from our parent application template context.</p>\n<p>Lets implement it\nWe need two things to make this work, a share  service and the share-ui \ncomponent. Lets start with the service.</p>\n<p>I make an assumption that you have already setup your app and engine, since\nthose two steps are documented elsewhere, I'll skip them for brevity.</p>\n<p>share  service\nWe'll create our service first:</p>\n<p>It should look like so:</p>\n<p>This is all that needs to be done for the service. Make sure to share the\nservice with your engine:</p>\n<p>Then in our engine we also define it:</p>\n<p>share-ui  component\nNow that we have our service, lets create our component and\nwire it all together.</p>\n<p>We'll start by injecting our service into the share-ui  component:</p>\n<p>Notice that we also have tagName  set, that is to prevent adding an unneeded div\nelement into the DOM, since we aren't rendering any UI with this component. Now\nthat our component can communicate with our service, we need to set the \ncomponent  argument on our service, so lets do that:</p>\n<p>We should now have the functionallity that we presented above. The on thing we\nmissed is actually using the service in our engine, so just inject it\nin your component or controller, depending on where you use your shared\ncomponents.</p>\n<p>Note: Make sure to use the share-ui  component in a parent template that will\nalways be visible when the engine is used. I recommend the application \ntemplate.</p>\n<p>What now?\nThe above example is powerful enough to support additional sharing, like helper\nand data. You can also share items from addons in your parent application,\npreventing duplication of addons between parent and engines.</p>\n<p>If you want to go further, you can even build a theming system ontop of this\nsetup by defining UI components for each theme and having an attribute on the \nshare-ui  component that toggles between the different component sets.</p>\n<p>Feel free to connect via Twitter if you have any comments/suggestions.</p>","content":"Is this what I'm looking for?\nYou have at least one engine and you want to share components from your parent\napp without having an in-repo-addon to share the common components. You might\nalso want fine-grain control over how the components are setup and what data\ncomes over. Most likely these are not UI-only components, but they deal with\nyour app data and business logic.\n\nI'm hear to tell you that it's possible, but it's a manual process that involves\nusing some \"advanced\" concepts that Ember introduced in v2. So lets dig in and\nsee what that looks like.\n\nWhat it looks like\nI'm going to jump to the end and show you the result, then we'll go back and\ncover how to implement this in your app.\n\nWe start with the template in your engine:\n\n\n\nIt looks very simple, notice that the above is a component, and it's being\nrendered using dot notation off of a share  service.\n\nNow that we see how it's used, lets see how it's setup in our parent app.\n\n\n\nThe above uses a custom component called share-ui  which acts like a proxy to\nour share  service. Then we use the built-in hash  helper which basically just\ncreates an object and passes it as an \"argument\" to our component.\n\nYou should alos notice that we use the component  helper, which lets us\ndynamically setup a component without calling it. In the above example we passed\nthe user  from our parent application template context.\n\nLets implement it\nWe need two things to make this work, a share  service and the share-ui \ncomponent. Lets start with the service.\n\nI make an assumption that you have already setup your app and engine, since\nthose two steps are documented elsewhere, I'll skip them for brevity.\n\nshare  service\nWe'll create our service first:\n\n\n\nIt should look like so:\n\n\n\nThis is all that needs to be done for the service. Make sure to share the\nservice with your engine:\n\n\n\nThen in our engine we also define it:\n\n\n\nshare-ui  component\nNow that we have our service, lets create our component and\nwire it all together.\n\n\n\nWe'll start by injecting our service into the share-ui  component:\n\n\n\nNotice that we also have tagName  set, that is to prevent adding an unneeded div\nelement into the DOM, since we aren't rendering any UI with this component. Now\nthat our component can communicate with our service, we need to set the \ncomponent  argument on our service, so lets do that:\n\n\n\nWe should now have the functionallity that we presented above. The on thing we\nmissed is actually using the service in our engine, so just inject it\nin your component or controller, depending on where you use your shared\ncomponents.\n\nNote: Make sure to use the share-ui  component in a parent template that will\nalways be visible when the engine is used. I recommend the application \ntemplate.\n\nWhat now?\nThe above example is powerful enough to support additional sharing, like helper\nand data. You can also share items from addons in your parent application,\npreventing duplication of addons between parent and engines.\n\nIf you want to go further, you can even build a theming system ontop of this\nsetup by defining UI components for each theme and having an attribute on the \nshare-ui  component that toggles between the different component sets.\n\nFeel free to connect via Twitter if you have any comments/suggestions.","title":"Sharing Components with Engines","date":"2018-03-19T14:02:57.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"},{"type":"tags","id":"components"},{"type":"tags","id":"engines"}]}}}}