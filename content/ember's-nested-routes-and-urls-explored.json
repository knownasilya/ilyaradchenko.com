{"data":{"type":"contents","id":"ember's-nested-routes-and-urls-explored","attributes":{"html":"<p>Ember's router is powerful and a bit unique, in that it has a nested structure for the routes which build up the URL a user would see in the browser.\nGiven it's power, it is easy to be unsure about how to structure your routes, especially in scenarios where you have parent-child UI patterns or CRUD like\nresources.</p>\n<p>One of the patterns that I've learned is not using extra nesting when want to build out a multi-part URL structure, like <code>/users/1234</code>, which seems like it should be nested, but generally\na single level is enough. I'd structure it like this:</p>\n<pre><code class=\"js language-js\">this.route('user', { path: '/users/:userId' });\n</code></pre>\n<p>This puts your user \"view\" route at the <code>app/pods/user</code> directory (my examples will use PODS, since they are sane for routes).\nThe following is generally not the way I'd write my router map, even though it creates the same URL pattern.</p>\n<pre><code class=\"js language-js\">this.route('users', function () {\nthis.route('user', { path: ':userId' });\n});\n</code></pre>\n<p>Unless you are showing the list of users at the same time as the selected user, which I think is a rare pattern, this is probably not the way your route should work.\nThe reason I wouldn't do this is because it adds unnecessary mental overhead between the list and a selected item from the list.\nWith my preferred pattern, if I wanted a list route, it would be a sibling to the resources.</p>\n<pre><code class=\"js language-js\">this.route('users');\nthis.route('user', { path: '/users/:userId' });\n</code></pre>\n<p>And the folder structure is sane as well:</p>\n<pre><code>app\npods\n  users\n  user\n</code></pre>\n<p>Since the two usually don't share any common UI, the common UI will probably be one route up or at the <code>application</code> route.\nWell that's it! Let me know if this is how you do it or if you completely disagree.</p>","content":"Ember's router is powerful and a bit unique, in that it has a nested structure for the routes which build up the URL a user would see in the browser.\nGiven it's power, it is easy to be unsure about how to structure your routes, especially in scenarios where you have parent-child UI patterns or CRUD like\nresources.\n\nOne of the patterns that I've learned is not using extra nesting when want to build out a multi-part URL structure, like `/users/1234`, which seems like it should be nested, but generally\na single level is enough. I'd structure it like this:\n\n```js\nthis.route('user', { path: '/users/:userId' });\n```\n\nThis puts your user \"view\" route at the `app/pods/user` directory (my examples will use PODS, since they are sane for routes).\nThe following is generally not the way I'd write my router map, even though it creates the same URL pattern.\n\n```js\nthis.route('users', function () {\nthis.route('user', { path: ':userId' });\n});\n```\n\nUnless you are showing the list of users at the same time as the selected user, which I think is a rare pattern, this is probably not the way your route should work.\nThe reason I wouldn't do this is because it adds unnecessary mental overhead between the list and a selected item from the list.\nWith my preferred pattern, if I wanted a list route, it would be a sibling to the resources.\n\n```js\nthis.route('users');\nthis.route('user', { path: '/users/:userId' });\n```\n\nAnd the folder structure is sane as well:\n\n```\napp\npods\n  users\n  user\n```\n\nSince the two usually don't share any common UI, the common UI will probably be one route up or at the `application` route.\nWell that's it! Let me know if this is how you do it or if you completely disagree.","title":"Ember's Nested Routes and URLs Explored","date":"2019-12-05T22:14:07.784Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}}}