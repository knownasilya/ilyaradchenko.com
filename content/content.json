{"data":[{"type":"contents","id":"billing-and-finite-state-machines","attributes":{"html":"<p>This week I've been coding up some billing workflows and it has been a while since I've done that, so naturally I underestimated the amount of work that is required for proper billing.</p>\n<p>Thankfully I'm using Stripe, which has all of their many ducks in a row and great documentation and testing tools. Every time I work on billing I lean towards using a finite state machine to represent my workflow, but I never end up doing it, because for some reason it's hard for me to decide on and stick to using FSMs, maybe because it's just so against how my brain thinks or it's because I think the problem will be easier. Well it usually never ends up easier, and in the end I regret not using a FSM. Maybe something like #nocode/visual editing would help with this kind of disconnect for me and state machines.</p>\n<p>Just some raw thoughts as I'm working on billing. What has been your experience with billing and FSMs on the server or client side?</p>","content":"This week I've been coding up some billing workflows and it has been a while since I've done that, so naturally I underestimated the amount of work that is required for proper billing.\n\nThankfully I'm using Stripe, which has all of their many ducks in a row and great documentation and testing tools. Every time I work on billing I lean towards using a finite state machine to represent my workflow, but I never end up doing it, because for some reason it's hard for me to decide on and stick to using FSMs, maybe because it's just so against how my brain thinks or it's because I think the problem will be easier. Well it usually never ends up easier, and in the end I regret not using a FSM. Maybe something like #nocode/visual editing would help with this kind of disconnect for me and state machines.\n\nJust some raw thoughts as I'm working on billing. What has been your experience with billing and FSMs on the server or client side?","title":"Billing and Finite State Machines","date":"2019-09-26T15:31:32.693Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"data-down-actions-up","attributes":{"html":"<p>I hear many people asking how they can compose components, and since the Ember\nGuides [http://guides.emberjs.com/]  don't help us in that respect, I wrote my\nown guide as a PR [https://github.com/emberjs/guides/pull/66]  to the guides. I\nfigured that I might as well get this out to the public while I wait on it\ngetting merged. This will allow us to improve the guide, so feel free to leave\ncomments/suggestions in the PR (inline, etc).</p>\n<hr />\n<p>Components really shine when you use them to their full potential, which is when\nyou compose them.\nTake for example the <ul>  element, and the fact that only <li>  elements are\nappropriate as children.\nIf we want the same type of behavior, then we have to compose our components.</p>\n<p>Just like we compose regular HTML elements, we can do the same with components.</p>\n<p>{{#user-list users=model sortBy='name' as |user|}}\n  {{user-card user=user}}\n{{/user-list}}</p>\n<p>Component Blocks\nComponents can be used in two forms, just like regular HTML elements.</p>\n<p>Inline Form</p>\n<p>{{user-list users=model}}</p>\n<p>Block Form</p>\n<p>{{#user-list users=model}}\n  {{!-- custom template here --}}\n{{/user-list}}</p>\n<p>To compose components, we must use the block form, but we must also\nbe able to distinguish from within our component which form the user\nis implementing. This can be done with the template  property.</p>\n<p>{{#if template}}\n  {{yield}}\n{{else}}\n  </p>\n<p>No Template Specified</p>\n<p>{{/if}}</p>\n<p>We can check if template  is truthy, and if it is that means that the user\nspecified a custom template.\nWell, once we have a template, we probably want to use that in our component,\nand that's exactly what {{yield}}  does.</p>\n<p>This helper can be used once, or many times. You can make your component into a\ntype of <ul>  element,\nthat is a list that will repeat n times. Like the following example, where we\ncan output a custom summary.</p>\n<p>{{#each posts as |post|}}\n  </p>\n<h3>{{post.title}}</h3>\n<p>{{yield}}</p>\n<p>{{/each}}</p>\n<p>Which can be used like so:</p>\n<p>{{#post-list posts=model}}\n  Greatest post ever!\n{{/post-list}}</p>\n<p>And will result in the following HTML:</p>\n<div id=\"ember123\" class=\"ember-view\">\n  <h3>Tomster goes to town</h3>\n  <p>Greatest post ever!</p>\n  <h3>Tomster on vacation</h3>\n  <p>Greatest post ever!</p>\n</div>\n<p>But what use is it to just output the same thing over and over? Don't we want to\ncustomize our posts,\nand display the right content? Sure we do. Lets explore the {{yield}}  helper a\nbit.</p>\n<p>Data Down\nTo accomplish composability beyond just simple templates, we need to pass\ncontext to those templates. This can be done with the {{yield}}  helper.</p>\n<p>The {{yield}}  defines where the template we defined inside our component block\nwill yield in the component's layout, as we saw in the previous section. Apart\nfrom that, the yield helper also allows us to send data down, providing a\ncontext for the templates.</p>\n<p>{{yield}}\n{{yield \"hello\"}}\n{{yield item}}\n{{yield this \"bye\"}}</p>\n<p>By default yield does not send any context, but you can provide an arbitrary\nnumber of arguments.\nOnce you are sending data down, the child components need to consume that data.\nWe can do this with the as  operator. Let's take {{yield user \"My Item\"}}  as an\nexample:</p>\n<p>{{#user-list users=model as |user title|}}\n  </p>\n<h3>{{title}}</h3>\n<p>{{user-card user=user}}\n{{/user-list}}</p>\n<p>Now {{user-card}}  has access to the current user, which would change if \n{{user-list}}  placed it's yield helper inside an each block.\nThis opens up the possibility to use the {{component}}  helper for different\ntemplates, for example:</p>\n<h3>Profile</h3>\n<p>{{yield \"user-avatar\" user}}\n{{yield \"user-contact\" user}}</p>\n<p>{{#user-profile user=model as |section user|}}\n  {{component section user=user}}\n{{/user-profile}}</p>\n<p>With the {{component}}  helper, we can bind our context to names of components\ndynamically, which in this case means that we can customize\nthe user profile with custom components bound to the relevant data. This means\nwe can have multiple extension points in our components, making them much more\nversatile.</p>\n<p>Actions Up\nNow that we can send data down, we probably want to manipulate that data via\nsome user interaction,\nlike changing a user's avatar, or whatever it is you're doing. We can accomplish\nthis by using actions.</p>\n<p>Actions are great, but for actions to work in the right context, we must use the\n targetObject  property to specify\nwhere we want the action to go. Before we can specify the targetObject  property\non our \"acting\" component, we need\nto expose that target as the context.</p>\n<p>{{yield this}}</p>\n<p>The targetObject  is the component that you want to handle the action, in this\ncase it's the parent component.</p>\n<p>{{#user-profile user=model as |profile|}}\n  {{user-avatar change=\"updateAvatar\" targetObject=profile}}\n{{/user-profile}}</p>\n<p>Since profile  is the instance of the {{user-profile}}  component, that means it\ncan accept the \"updateAvatar\" action request.\nThe action must be defined on the user profile component instance.</p>\n<p>Here's a mash-up of the possible scenarios with actions:</p>\n<p>{{#full-post post=model as |fullPost|}}\n  {{post-like like=\"like\" targetObject=fullPost}}\n  {{post-subscribe subscribe=\"subscribe\" targetObject=fullPost}}\n  {{comment-box submit=\"addComment\" targetObject=post viewName=\"commentBox\"}}</p>\n<p><button type=\"button\" {{action \"fullScreen\" target=commentBox}}>Zen Mode</button>\n{{/full-post}}</p>\n<p>Note: When using {{action}}  helpers, instead of a component, you need to\nspecify target  instead of targetObject.\nAlso, when working with actions and sibling components, use viewName  to\n\"export\" the sibling component instance as a possible target.</p>","content":"I hear many people asking how they can compose components, and since the Ember\nGuides [http://guides.emberjs.com/]  don't help us in that respect, I wrote my\nown guide as a PR [https://github.com/emberjs/guides/pull/66]  to the guides. I\nfigured that I might as well get this out to the public while I wait on it\ngetting merged. This will allow us to improve the guide, so feel free to leave\ncomments/suggestions in the PR (inline, etc).\n\n\n--------------------------------------------------------------------------------\n\nComponents really shine when you use them to their full potential, which is when\nyou compose them.\nTake for example the <ul>  element, and the fact that only <li>  elements are\nappropriate as children.\nIf we want the same type of behavior, then we have to compose our components.\n\nJust like we compose regular HTML elements, we can do the same with components.\n\n{{#user-list users=model sortBy='name' as |user|}}\n  {{user-card user=user}}\n{{/user-list}}\n\n\nComponent Blocks\nComponents can be used in two forms, just like regular HTML elements.\n\nInline Form\n\n{{user-list users=model}}\n\n\nBlock Form\n\n{{#user-list users=model}}\n  {{!-- custom template here --}}\n{{/user-list}}\n\n\nTo compose components, we must use the block form, but we must also\nbe able to distinguish from within our component which form the user\nis implementing. This can be done with the template  property.\n\n{{#if template}}\n  {{yield}}\n{{else}}\n  <p>No Template Specified</p>\n{{/if}}\n\n\nWe can check if template  is truthy, and if it is that means that the user\nspecified a custom template.\nWell, once we have a template, we probably want to use that in our component,\nand that's exactly what {{yield}}  does.\n\nThis helper can be used once, or many times. You can make your component into a\ntype of <ul>  element,\nthat is a list that will repeat n times. Like the following example, where we\ncan output a custom summary.\n\n{{#each posts as |post|}}\n  <h3>{{post.title}}</h3>\n  <p>{{yield}}</p>\n{{/each}}\n\n\nWhich can be used like so:\n\n{{#post-list posts=model}}\n  Greatest post ever!\n{{/post-list}}\n\n\nAnd will result in the following HTML:\n\n<div id=\"ember123\" class=\"ember-view\">\n  <h3>Tomster goes to town</h3>\n  <p>Greatest post ever!</p>\n  <h3>Tomster on vacation</h3>\n  <p>Greatest post ever!</p>\n</div>\n\n\nBut what use is it to just output the same thing over and over? Don't we want to\ncustomize our posts,\nand display the right content? Sure we do. Lets explore the {{yield}}  helper a\nbit.\n\nData Down\nTo accomplish composability beyond just simple templates, we need to pass\ncontext to those templates. This can be done with the {{yield}}  helper.\n\nThe {{yield}}  defines where the template we defined inside our component block\nwill yield in the component's layout, as we saw in the previous section. Apart\nfrom that, the yield helper also allows us to send data down, providing a\ncontext for the templates.\n\n{{yield}}\n{{yield \"hello\"}}\n{{yield item}}\n{{yield this \"bye\"}}\n\n\nBy default yield does not send any context, but you can provide an arbitrary\nnumber of arguments.\nOnce you are sending data down, the child components need to consume that data.\nWe can do this with the as  operator. Let's take {{yield user \"My Item\"}}  as an\nexample:\n\n{{#user-list users=model as |user title|}}\n  <h3>{{title}}</h3>\n  {{user-card user=user}}\n{{/user-list}}\n\n\nNow {{user-card}}  has access to the current user, which would change if \n{{user-list}}  placed it's yield helper inside an each block.\nThis opens up the possibility to use the {{component}}  helper for different\ntemplates, for example:\n\n<h3>Profile</h3>\n{{yield \"user-avatar\" user}}\n{{yield \"user-contact\" user}}\n\n\n{{#user-profile user=model as |section user|}}\n  {{component section user=user}}\n{{/user-profile}}\n\n\nWith the {{component}}  helper, we can bind our context to names of components\ndynamically, which in this case means that we can customize\nthe user profile with custom components bound to the relevant data. This means\nwe can have multiple extension points in our components, making them much more\nversatile.\n\nActions Up\nNow that we can send data down, we probably want to manipulate that data via\nsome user interaction,\nlike changing a user's avatar, or whatever it is you're doing. We can accomplish\nthis by using actions.\n\nActions are great, but for actions to work in the right context, we must use the\n targetObject  property to specify\nwhere we want the action to go. Before we can specify the targetObject  property\non our \"acting\" component, we need\nto expose that target as the context.\n\n{{yield this}}\n\n\nThe targetObject  is the component that you want to handle the action, in this\ncase it's the parent component.\n\n{{#user-profile user=model as |profile|}}\n  {{user-avatar change=\"updateAvatar\" targetObject=profile}}\n{{/user-profile}}\n\n\nSince profile  is the instance of the {{user-profile}}  component, that means it\ncan accept the \"updateAvatar\" action request.\nThe action must be defined on the user profile component instance.\n\nHere's a mash-up of the possible scenarios with actions:\n\n{{#full-post post=model as |fullPost|}}\n  {{post-like like=\"like\" targetObject=fullPost}}\n  {{post-subscribe subscribe=\"subscribe\" targetObject=fullPost}}\n  {{comment-box submit=\"addComment\" targetObject=post viewName=\"commentBox\"}}\n\n  <button type=\"button\" {{action \"fullScreen\" target=commentBox}}>Zen Mode</button>\n{{/full-post}}\n\n\nNote: When using {{action}}  helpers, instead of a component, you need to\nspecify target  instead of targetObject.\nAlso, when working with actions and sibling components, use viewName  to\n\"export\" the sibling component instance as a possible target.","title":"Data Down, Actions Up","date":"2015-04-20T16:34:16.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"},{"type":"tags","id":"components"}]}}},{"type":"contents","id":"ember's-nested-routes-and-urls-explored","attributes":{"html":"<p>Ember's router is powerful and a bit unique, in that it has a nested structure for the routes which build up the URL a user would see in the browser.\nGiven it's power, it is easy to be unsure about how to structure your routes, especially in scenarios where you have parent-child UI patterns or CRUD like\nresources.</p>\n<p>One of the patterns that I've learned is not using extra nesting when want to build out a multi-part URL structure, like <code>/users/1234</code>, which seems like it should be nested, but generally\na single level is enough. I'd structure it like this:</p>\n<pre><code class=\"js language-js\">this.route('user', { path: '/users/:userId' });\n</code></pre>\n<p>This puts your user \"view\" route at the <code>app/pods/user</code> directory (my examples will use PODS, since they are sane for routes).\nThe following is generally not the way I'd write my router map, even though it creates the same URL pattern.</p>\n<pre><code class=\"js language-js\">this.route('users', function () {\nthis.route('user', { path: ':userId' });\n});\n</code></pre>\n<p>Unless you are showing the list of users at the same time as the selected user, which I think is a rare pattern, this is probably not the way your route should work.\nThe reason I wouldn't do this is because it adds unnecessary mental overhead between the list and a selected item from the list.\nWith my preferred pattern, if I wanted a list route, it would be a sibling to the resources.</p>\n<pre><code class=\"js language-js\">this.route('users');\nthis.route('user', { path: '/users/:userId' });\n</code></pre>\n<p>And the folder structure is sane as well:</p>\n<pre><code>app\npods\n  users\n  user\n</code></pre>\n<p>Since the two usually don't share any common UI, the common UI will probably be one route up or at the <code>application</code> route.\nWell that's it! Let me know if this is how you do it or if you completely disagree.</p>","content":"Ember's router is powerful and a bit unique, in that it has a nested structure for the routes which build up the URL a user would see in the browser.\nGiven it's power, it is easy to be unsure about how to structure your routes, especially in scenarios where you have parent-child UI patterns or CRUD like\nresources.\n\nOne of the patterns that I've learned is not using extra nesting when want to build out a multi-part URL structure, like `/users/1234`, which seems like it should be nested, but generally\na single level is enough. I'd structure it like this:\n\n```js\nthis.route('user', { path: '/users/:userId' });\n```\n\nThis puts your user \"view\" route at the `app/pods/user` directory (my examples will use PODS, since they are sane for routes).\nThe following is generally not the way I'd write my router map, even though it creates the same URL pattern.\n\n```js\nthis.route('users', function () {\nthis.route('user', { path: ':userId' });\n});\n```\n\nUnless you are showing the list of users at the same time as the selected user, which I think is a rare pattern, this is probably not the way your route should work.\nThe reason I wouldn't do this is because it adds unnecessary mental overhead between the list and a selected item from the list.\nWith my preferred pattern, if I wanted a list route, it would be a sibling to the resources.\n\n```js\nthis.route('users');\nthis.route('user', { path: '/users/:userId' });\n```\n\nAnd the folder structure is sane as well:\n\n```\napp\npods\n  users\n  user\n```\n\nSince the two usually don't share any common UI, the common UI will probably be one route up or at the `application` route.\nWell that's it! Let me know if this is how you do it or if you completely disagree.","title":"Ember's Nested Routes and URLs Explored","date":"2019-12-05T22:14:07.784Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"ember-in-2018-and-beyond","attributes":{"html":"<p>This post is in response to the Call for Blog Posts\n[https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html] \nput out there by the core team. Have a look at all the other blog posts in this\nseries [https://github.com/zinyando/emberjs2018-posts]. Most of what I'll say\nhas probably been said, but I think it's worth repeating to show the important\nthings via repetition.</p>\n<p>I'm an avid user of Ember and have been using it since the RCs of v1.0.0. I love\nEmber, warts and all, which means I have come to terms with many of it's issues\nand short comings. Having said that, I see a future that is brighter, where\nEmber is a major contendor and trend setter in the frontend community. What\nfollows are the things that I think  need to change to make that vision come\ntrue.</p>\n<p>Ship the things\nThe Ember community is one focused on conventions and shared solutions rather\nthen many solutions without a clear winner. This makes it hard to focus on one\narea, since we need conventions in many areas of frontend development. Due to\nthis difficulty I think we've gotten many hands in many things and many of those\nare half finished. I think we need to double down as a community and finish the\nthings that we've started.</p>\n<p>I'm one of those that loved the idea of Routable Components, even when the goal\nwas moving further and further away. It was promised so long ago and I hoped for\nso long. When Yehuda Katz [https://mobile.twitter.com/wycats]  closed  that RFC,\nI think a bit of that dream died, but at the same time I was happy. Not because\nit wasn't going to happen but because there was clear communication, finally. In\nthe same way, we might need to put some in-progress work on the backburner with\nclarity and divert resources to work that is more pressing.</p>\n<p>Fix the bugs\nA big part of Ember is the router, but that is probably also one of the messiest\nparts with lots of cruft due to the churn in the earliest days of Ember. There\nhas been much work in the last couple of years (thanks Trent Willis\n[https://mobile.twitter.com/trentmwillis]  and others!) to clean up and document\nmore of the router code, but this part is still very brittle\n[https://github.com/emberjs/ember.js/labels/Query%20Params]. Almost every app\nthat I have built using Ember has used the URL in a major way for users of the\napps.</p>\n<p>One of the biggest things when new users come in is to run into these bugs that\nhave been open for a while, and it's not the most encouraging thing when you\nwant to build something on top of this big framework.</p>\n<p>Focus on longterm vision\nMany have spoken about marketing, vision and brand, but I think it's worth\nrepeating that it's super important. For Ember to grow we need a long term\nvision that needs to grow as the wider community grows. We made some early bets\nthat have worked out well, and we need to keep doing that in the technical\nsphere, but we also need to do that for the image of the framework. We don't\nhave the backing and resources of the big companies that React and Angular have,\nso we must be more focused.</p>\n<p>Starting with a marketing team, which should be responsible for branding, the\nmain website and promoting the framework on social media.</p>\n<p>I think this is also the place to hone what Ember is. I really like the idea of\nEmber as a Component-Service Framework\n[https://medium.com/@pzuraq/emberjs-2018-ember-as-a-component-service-framework-2e49492734f1] \n as proposed by @pzuraq [https://mobile.twitter.com/pzuraq]. Many have a view of\nEmber as MVC, and I think that is hurting more then helping when other\nframeworks put themselves forward as component based.</p>\n<p>https://mobile.twitter.com/pzuraq</p>\n<p>I ❤️ Ember\nJust the fact that we can learn from others and do so actively - take this whole\n\"call for blog posts\" initiative - really gives me hope in Ember's future. I\nknow that the core team cares deeply about the future of Ember and this shows in\ntheir attitude. Many have said some hard things in response, and I hope those\nhard things cause a stir in the community for the better for Ember's future. We\nneed more leaders to step up and organize/delegate in the right areas.</p>\n<p>Thanks to David Baker [https://mobile.twitter.com/acorncom]  for reviewing this\npost!</p>","content":"This post is in response to the Call for Blog Posts\n[https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html] \nput out there by the core team. Have a look at all the other blog posts in this\nseries [https://github.com/zinyando/emberjs2018-posts]. Most of what I'll say\nhas probably been said, but I think it's worth repeating to show the important\nthings via repetition.\n\nI'm an avid user of Ember and have been using it since the RCs of v1.0.0. I love\nEmber, warts and all, which means I have come to terms with many of it's issues\nand short comings. Having said that, I see a future that is brighter, where\nEmber is a major contendor and trend setter in the frontend community. What\nfollows are the things that I think  need to change to make that vision come\ntrue.\n\nShip the things\nThe Ember community is one focused on conventions and shared solutions rather\nthen many solutions without a clear winner. This makes it hard to focus on one\narea, since we need conventions in many areas of frontend development. Due to\nthis difficulty I think we've gotten many hands in many things and many of those\nare half finished. I think we need to double down as a community and finish the\nthings that we've started.\n\nI'm one of those that loved the idea of Routable Components, even when the goal\nwas moving further and further away. It was promised so long ago and I hoped for\nso long. When Yehuda Katz [https://mobile.twitter.com/wycats]  closed  that RFC,\nI think a bit of that dream died, but at the same time I was happy. Not because\nit wasn't going to happen but because there was clear communication, finally. In\nthe same way, we might need to put some in-progress work on the backburner with\nclarity and divert resources to work that is more pressing.\n\nFix the bugs\nA big part of Ember is the router, but that is probably also one of the messiest\nparts with lots of cruft due to the churn in the earliest days of Ember. There\nhas been much work in the last couple of years (thanks Trent Willis\n[https://mobile.twitter.com/trentmwillis]  and others!) to clean up and document\nmore of the router code, but this part is still very brittle\n[https://github.com/emberjs/ember.js/labels/Query%20Params]. Almost every app\nthat I have built using Ember has used the URL in a major way for users of the\napps.\n\nOne of the biggest things when new users come in is to run into these bugs that\nhave been open for a while, and it's not the most encouraging thing when you\nwant to build something on top of this big framework.\n\nFocus on longterm vision\nMany have spoken about marketing, vision and brand, but I think it's worth\nrepeating that it's super important. For Ember to grow we need a long term\nvision that needs to grow as the wider community grows. We made some early bets\nthat have worked out well, and we need to keep doing that in the technical\nsphere, but we also need to do that for the image of the framework. We don't\nhave the backing and resources of the big companies that React and Angular have,\nso we must be more focused.\n\nStarting with a marketing team, which should be responsible for branding, the\nmain website and promoting the framework on social media.\n\nI think this is also the place to hone what Ember is. I really like the idea of\nEmber as a Component-Service Framework\n[https://medium.com/@pzuraq/emberjs-2018-ember-as-a-component-service-framework-2e49492734f1] \n as proposed by @pzuraq [https://mobile.twitter.com/pzuraq]. Many have a view of\nEmber as MVC, and I think that is hurting more then helping when other\nframeworks put themselves forward as component based.\n\nhttps://mobile.twitter.com/pzuraq\n\nI ❤️ Ember\nJust the fact that we can learn from others and do so actively - take this whole\n\"call for blog posts\" initiative - really gives me hope in Ember's future. I\nknow that the core team cares deeply about the future of Ember and this shows in\ntheir attitude. Many have said some hard things in response, and I hope those\nhard things cause a stir in the community for the better for Ember's future. We\nneed more leaders to step up and organize/delegate in the right areas.\n\nThanks to David Baker [https://mobile.twitter.com/acorncom]  for reviewing this\npost!","title":"Ember In 2018 and Beyond","date":"2018-05-22T20:31:27.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"favorite-ember-addons","attributes":{"html":"<p>I decided to write down some of my favorite Ember.js addons that I have used\nin the past. There are a handful of addons marked with [bleeding edge], meaning\nthey are either alpha or experimental in nature.</p>\n<p>All Projects</p>\n<ul>\n<li>https://github.com/ember-template-lint/ember-cli-template-lint  lint the\ntemplates</li>\n<li>https://github.com/ember-cli-deploy/ember-cli-deploy  Deployment pipeline\naddons or apps</li>\n</ul>\n<p>Building Apps</p>\n<ul>\n<li>https://github.com/emberjs/ember-optional-features  [bleeding edge] Enable\noptional features (will be in cli soon)</li>\n<li>https://github.com/ef4/ember-auto-import  [bleeding edge] Make importing npm\nmodules easy</li>\n<li>https://github.com/rwjblue/ember-angle-bracket-invocation-polyfill  [bleeding\nedge] React style component names</li>\n<li>https://github.com/ember-decorators/ember-decorators  [bleeding edge] ES\nClasses for components</li>\n<li>https://github.com/machty/ember-concurrency  Managing Asynchrony</li>\n<li>https://github.com/offirgolan/ember-parachute  Managing Query Params</li>\n<li>https://github.com/ember-animation/liquid-fire  Animations</li>\n<li>https://github.com/cibernox/ember-power-select  Awesome select component</li>\n<li>https://github.com/cibernox/ember-power-calendar  Awesome calendar component</li>\n<li>https://github.com/tim-evans/ember-page-title  Set the title of pages</li>\n<li>https://github.com/amiel/ember-data-url-templates  [ember data] Easilly\nextend urls for server requests</li>\n<li>https://github.com/machty/ember-constraint-router  [bleeding edge]\nAlternative routing, good for realtime</li>\n<li>https://github.com/cardstack/ember-toolbars  Managing toolbars with\nanimations</li>\n<li>https://github.com/freshbooks/ember-responsive  Media queries for your\ncode/templates</li>\n<li>https://github.com/simplabs/ember-simple-auth  A great solution for all types\nof authentication</li>\n<li>https://github.com/ember-engines/ember-engines  Splitting apps for loose\ncoupling (great for multiple teams), also lazy loading</li>\n</ul>\n<p>Building Addons</p>\n<ul>\n<li>https://github.com/ember-learn/ember-cli-addon-docs  Versioned documentation</li>\n<li>https://github.com/ember-template-lint/ember-template-recast  Editing\ntemplates programatically</li>\n</ul>\n<p>Writing Tests</p>\n<ul>\n<li>https://github.com/simplabs/qunit-dom  Simple abstraction over DOM for\ntesting elements (cli soon)</li>\n<li>https://github.com/Cropster/ember-visual-test  Visual testing</li>\n<li>https://github.com/salsify/ember-milestones  [bleeding edge] Testing micro\nasync state</li>\n</ul>\n<p>What are some of your favorite addons? Leave your comments here\n[https://mobile.twitter.com/knownasilya/status/1004430985826652161].</p>","content":"I decided to write down some of my favorite Ember.js addons that I have used\nin the past. There are a handful of addons marked with [bleeding edge], meaning\nthey are either alpha or experimental in nature.\n\nAll Projects\n * https://github.com/ember-template-lint/ember-cli-template-lint  lint the\n   templates\n * https://github.com/ember-cli-deploy/ember-cli-deploy  Deployment pipeline\n   addons or apps\n\nBuilding Apps\n * https://github.com/emberjs/ember-optional-features  [bleeding edge] Enable\n   optional features (will be in cli soon)\n * https://github.com/ef4/ember-auto-import  [bleeding edge] Make importing npm\n   modules easy\n * https://github.com/rwjblue/ember-angle-bracket-invocation-polyfill  [bleeding\n   edge] React style component names\n * https://github.com/ember-decorators/ember-decorators  [bleeding edge] ES\n   Classes for components\n * https://github.com/machty/ember-concurrency  Managing Asynchrony\n * https://github.com/offirgolan/ember-parachute  Managing Query Params\n * https://github.com/ember-animation/liquid-fire  Animations\n * https://github.com/cibernox/ember-power-select  Awesome select component\n * https://github.com/cibernox/ember-power-calendar  Awesome calendar component\n * https://github.com/tim-evans/ember-page-title  Set the title of pages\n * https://github.com/amiel/ember-data-url-templates  [ember data] Easilly\n   extend urls for server requests\n * https://github.com/machty/ember-constraint-router  [bleeding edge]\n   Alternative routing, good for realtime\n * https://github.com/cardstack/ember-toolbars  Managing toolbars with\n   animations\n * https://github.com/freshbooks/ember-responsive  Media queries for your\n   code/templates\n * https://github.com/simplabs/ember-simple-auth  A great solution for all types\n   of authentication\n * https://github.com/ember-engines/ember-engines  Splitting apps for loose\n   coupling (great for multiple teams), also lazy loading\n\nBuilding Addons\n * https://github.com/ember-learn/ember-cli-addon-docs  Versioned documentation\n * https://github.com/ember-template-lint/ember-template-recast  Editing\n   templates programatically\n\nWriting Tests\n * https://github.com/simplabs/qunit-dom  Simple abstraction over DOM for\n   testing elements (cli soon)\n * https://github.com/Cropster/ember-visual-test  Visual testing\n * https://github.com/salsify/ember-milestones  [bleeding edge] Testing micro\n   async state\n\nWhat are some of your favorite addons? Leave your comments here\n[https://mobile.twitter.com/knownasilya/status/1004430985826652161].","title":"Favorite Ember Addons","date":"2018-06-06T18:30:28.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"fomo","attributes":{"html":"<p>I have to be honest, I've only picked up on this term about a year ago (maybe\nlonger) and at that time I didn't have any connection with the idea. A couple of\nmonths ago, I inadvertently stumbled on it again while reading Atomic Habits by\nJames Clear [https://jamesclear.com/atomic-habits], and what an impact it had.</p>\n<p>One of the ideas in that book talks about cues and cravings, in regard to making\ngood or bad habits. An example that James makes is in regard to checking your\nphone, it goes like this:</p>\n<p>Cue: A phone buzzes with a new text message.\nCraving: You want to learn the contents of the message.\nResponse: You grab the phone and read the text.\nReward: You satisfy your craving to read the message. Grabbing your phone\nbecomes associated with your phone buzzing.\n– James Clear (Atomic Habits, page 51)This example stirred something within me\nbecause at that time I was dealing with checking Twitter way too much. I knew\nabout my bad habit, of picking up the phone and opening Twitter any time there\nwas a free moment or a time of silence. What I didn't know, was the reasoning\nbehind why I was checking it so often. Mainly because I had not taken the time\nto analyze my habits.</p>\n<p>The process of behavior change always starts with awareness. You need to be\naware of your habits before you can change them.\n– James Clear (Atomic Habits, page 66)This is where FOMO, or the fear of missing out,  comes into play. I analyzed\nthis bad habit (did I mention that this was a bad habit?) and realized that I\nwas doing it because I was afraid to miss something happening in the tech\ncommunity, and specifically the Ember [http://emberjs.com]  community. I kept\nanalyzing and realized that I had the same bad habit with Github, which usually\noccurred after Twitter had no content. So what now?</p>\n<p>The first step is not what  or how, but who. You need to know who you want to\nbe. Otherwise, your quest for change is like a boat without a rudder.\n– James Clear (Atomic Habits, page 40)This section really resonated for me and\ntold me what I already knew. And it's this: I won't change my habits if I don't\nremember (or know) who I am. Notice how I said \"who I am\" instead of \"who I want\nto be\". The reason this is important to me is because I have a solid identity\nthat is defined by my relationship with God. I need to remember who I am (a\nchild of God) so that I can focus on being who I am already. This sounds a bit\nstrange, but in Christianity, there is an idea, \"already but not yet\", which\nillustrates that there is an ultimate reality already, but the time-based\nversion of that reality is still catching up. God already sees me as His son,\neven though presently I have bad habits and sin because Jesus the perfect Son of\nGod has paid for my sins (past, present, and future) and called me his co-heir.</p>\n<p>I really needed to remember that my identity and worth are not in how current I\nam in the Ember scene or how much I know. It's not in my job or my own vision of\nmy future, but my identity and worth are in my relationship with God.</p>","content":"I have to be honest, I've only picked up on this term about a year ago (maybe\nlonger) and at that time I didn't have any connection with the idea. A couple of\nmonths ago, I inadvertently stumbled on it again while reading Atomic Habits by\nJames Clear [https://jamesclear.com/atomic-habits], and what an impact it had.\n\nOne of the ideas in that book talks about cues and cravings, in regard to making\ngood or bad habits. An example that James makes is in regard to checking your\nphone, it goes like this:\n\nCue: A phone buzzes with a new text message.\nCraving: You want to learn the contents of the message.\nResponse: You grab the phone and read the text.\nReward: You satisfy your craving to read the message. Grabbing your phone\nbecomes associated with your phone buzzing.\n– James Clear (Atomic Habits, page 51)This example stirred something within me\nbecause at that time I was dealing with checking Twitter way too much. I knew\nabout my bad habit, of picking up the phone and opening Twitter any time there\nwas a free moment or a time of silence. What I didn't know, was the reasoning\nbehind why I was checking it so often. Mainly because I had not taken the time\nto analyze my habits.\n\nThe process of behavior change always starts with awareness. You need to be\naware of your habits before you can change them.\n– James Clear (Atomic Habits, page 66)This is where FOMO, or the fear of missing out,  comes into play. I analyzed\nthis bad habit (did I mention that this was a bad habit?) and realized that I\nwas doing it because I was afraid to miss something happening in the tech\ncommunity, and specifically the Ember [http://emberjs.com]  community. I kept\nanalyzing and realized that I had the same bad habit with Github, which usually\noccurred after Twitter had no content. So what now?\n\nThe first step is not what  or how, but who. You need to know who you want to\nbe. Otherwise, your quest for change is like a boat without a rudder.\n– James Clear (Atomic Habits, page 40)This section really resonated for me and\ntold me what I already knew. And it's this: I won't change my habits if I don't\nremember (or know) who I am. Notice how I said \"who I am\" instead of \"who I want\nto be\". The reason this is important to me is because I have a solid identity\nthat is defined by my relationship with God. I need to remember who I am (a\nchild of God) so that I can focus on being who I am already. This sounds a bit\nstrange, but in Christianity, there is an idea, \"already but not yet\", which\nillustrates that there is an ultimate reality already, but the time-based\nversion of that reality is still catching up. God already sees me as His son,\neven though presently I have bad habits and sin because Jesus the perfect Son of\nGod has paid for my sins (past, present, and future) and called me his co-heir.\n\nI really needed to remember that my identity and worth are not in how current I\nam in the Ember scene or how much I know. It's not in my job or my own vision of\nmy future, but my identity and worth are in my relationship with God.","title":"Bad Habits and FOMO","date":"2019-03-07T04:49:59.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"career"},{"type":"tags","id":"lessons"},{"type":"tags","id":"books"},{"type":"tags","id":"habits"},{"type":"tags","id":"god"}]}}},{"type":"contents","id":"fragmentation-over-obsalecence","attributes":{"html":"<p>Many people have written blog posts for #EmberJS2019 about where they want to\nsee Ember headed in the next year or so. I'll add only one item of my own, since\nthere are already many ideas in the pot. I believe we need to shift our\nmentality a bit.</p>\n<p>The Making Of Conventions\nConventions come out of many failed experiments that have been run on real use\ncases, i.e. production apps. The Ember community loves conventions and cares\nabout productivity, which unfortunately comes with a price, staying on the\nhappy-path without the needed experimentation required for new conventions.</p>\n<p>For the pit-of-incoherence to be fruitful and push us up the\nhilltop-of-coherence, we as developers need to put ourselves out there and learn\nsome lessons off the happy-path. It wont be easy, because it will cost us time,\nmoney, and failure. I think this step is especially hard for Ember developers\nbecause of the ethos that Ember has built.</p>\n<p>Fragmentation Results\nInevitably fragmentation will occur. Some people might take their experiments\ntoo far, or abandon them. Other experiments might fail. Yes these are risks that\nexist, but should not stop us. The goal is to take the best fragments and build\nthem up into a beautiful mosaic.</p>\n<p>At the end, when we reach the hilltop-of-coherence, some fragments will be left\nin the valley, maybe most of them. We do after all need alternatives and\ndifferent views to see the flaws in our designs. Let's not hold on too tightly\nto our ideas and code, but focus on unity out of our individual ideas.</p>\n<p>A Greater Danger\nIf we don't take up the cause to experiment for the greater good of the\ncommunity, for building it up, then we'll just keep chasing the competition\ninstead of building those conventions that can only be done by experimentation\nand failure. Ember will essentially become obsolete as it chases the other\nframeworks.</p>\n<p>This doesn't mean that we don't learn from the wider web community or that we\ndon't adopt great ideas, but it does mean that we have our beliefs, our \"why\",\nand we should filter all great ideas through that \"why\". Here's to a year of\nexperimentation and uniting in greater focus and vision as the Ember community.</p>","content":"Many people have written blog posts for #EmberJS2019 about where they want to\nsee Ember headed in the next year or so. I'll add only one item of my own, since\nthere are already many ideas in the pot. I believe we need to shift our\nmentality a bit.\n\nThe Making Of Conventions\nConventions come out of many failed experiments that have been run on real use\ncases, i.e. production apps. The Ember community loves conventions and cares\nabout productivity, which unfortunately comes with a price, staying on the\nhappy-path without the needed experimentation required for new conventions.\n\nFor the pit-of-incoherence to be fruitful and push us up the\nhilltop-of-coherence, we as developers need to put ourselves out there and learn\nsome lessons off the happy-path. It wont be easy, because it will cost us time,\nmoney, and failure. I think this step is especially hard for Ember developers\nbecause of the ethos that Ember has built.\n\nFragmentation Results\nInevitably fragmentation will occur. Some people might take their experiments\ntoo far, or abandon them. Other experiments might fail. Yes these are risks that\nexist, but should not stop us. The goal is to take the best fragments and build\nthem up into a beautiful mosaic.\n\nAt the end, when we reach the hilltop-of-coherence, some fragments will be left\nin the valley, maybe most of them. We do after all need alternatives and\ndifferent views to see the flaws in our designs. Let's not hold on too tightly\nto our ideas and code, but focus on unity out of our individual ideas.\n\nA Greater Danger\nIf we don't take up the cause to experiment for the greater good of the\ncommunity, for building it up, then we'll just keep chasing the competition\ninstead of building those conventions that can only be done by experimentation\nand failure. Ember will essentially become obsolete as it chases the other\nframeworks.\n\n  This doesn't mean that we don't learn from the wider web community or that we\ndon't adopt great ideas, but it does mean that we have our beliefs, our \"why\",\nand we should filter all great ideas through that \"why\". Here's to a year of\nexperimentation and uniting in greater focus and vision as the Ember community.","title":"Fragmentation Over Obsolescence","date":"2019-06-17T16:42:14.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"hello","attributes":{"html":"<p>This is the first post, and hopefully not the last ;) I'm Ilya Radchenko,\nusually go by 'knownasilya', and this is my blog where I write about life and\nweb development.</p>\n<p>I'm a 'full stack' developer and usually work with Emberjs and Nodejs, but also\ndabble in Dart. This blog will not be purely technical, since I don't believe in\nseparating who I am from what I do, since they are connected. This means that\nyou'll also hear about my faith, since I'm a Christian. You'll get to find out\nwhat that means and how that affects my profession.</p>\n<p>Hopefully you stick around, since I'm not the best writer in the world, nor am I\nthat interesting, but I'll try my best to post here when I can. Hope to hear\nfrom you in the comments along this journey, and to grow together in many\nfacets.</p>\n<p>P.S. I'll be customizing this site/blog as the time goes on.</p>","content":"This is the first post, and hopefully not the last ;) I'm Ilya Radchenko,\nusually go by 'knownasilya', and this is my blog where I write about life and\nweb development.\n\nI'm a 'full stack' developer and usually work with Emberjs and Nodejs, but also\ndabble in Dart. This blog will not be purely technical, since I don't believe in\nseparating who I am from what I do, since they are connected. This means that\nyou'll also hear about my faith, since I'm a Christian. You'll get to find out\nwhat that means and how that affects my profession.\n\nHopefully you stick around, since I'm not the best writer in the world, nor am I\nthat interesting, but I'll try my best to post here when I can. Hope to hear\nfrom you in the comments along this journey, and to grow together in many\nfacets.\n\nP.S. I'll be customizing this site/blog as the time goes on.","title":"Hello","date":"2014-11-21T15:55:14.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"introduction"}]}}},{"type":"contents","id":"joining-crash","attributes":{"html":"<p>I'm excited to announce that in just over a week I'll be joining Crash\n[https://crash.co]  to build the vision of helping you show your value while\nstarting/changing a career.</p>\n<p>Crash is building the category of ”Career Launch\" because the college degree is\nmostly an outdated solution from the pre-internet age and usually comes attached\nwith overwhelming debt. The reason why I'm so eager to get started is because I\nbelieve in the vision of enabling young people to realize and show their\npotential without the chains of debt. What Crash offers isn't just a product to\nhelp you, but also a mindset shift to cause you to think differently about\nyourself, not only in the workplace, but also personally.</p>\n<p>Beyond the goals, I'm glad to be working with a super focused team, which is all\nthe more rewarding. I'll be joining on to help build the products and the\nengineering team with Dave Wasmer [https://davewasmer.com/]. I'll continue to\nwork with the tools I love, like Ember.js, TypeScript, and Node.js; as well as\nlearning some new ones like GraphQL. I'm also looking forward to continuing to\ncontribute to the open-source community.</p>\n<p>To find out more about what Crash is all about, check out this introductory \nblog\npost [https://crash.co/blog/time-to-crash-your-career/].</p>","content":"I'm excited to announce that in just over a week I'll be joining Crash\n[https://crash.co]  to build the vision of helping you show your value while\nstarting/changing a career.\n\nCrash is building the category of ”Career Launch\" because the college degree is\nmostly an outdated solution from the pre-internet age and usually comes attached\nwith overwhelming debt. The reason why I'm so eager to get started is because I\nbelieve in the vision of enabling young people to realize and show their\npotential without the chains of debt. What Crash offers isn't just a product to\nhelp you, but also a mindset shift to cause you to think differently about\nyourself, not only in the workplace, but also personally.\n\nBeyond the goals, I'm glad to be working with a super focused team, which is all\nthe more rewarding. I'll be joining on to help build the products and the\nengineering team with Dave Wasmer [https://davewasmer.com/]. I'll continue to\nwork with the tools I love, like Ember.js, TypeScript, and Node.js; as well as\nlearning some new ones like GraphQL. I'm also looking forward to continuing to\ncontribute to the open-source community.\n\nTo find out more about what Crash is all about, check out this introductory \nblog\npost [https://crash.co/blog/time-to-crash-your-career/].","title":"Joining Crash","date":"2019-01-29T19:46:30.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"career"},{"type":"tags","id":"big-changes"}]}}},{"type":"contents","id":"learning-something-about-myself","attributes":{"html":"<p>This week has been a whirlwind of things, but the biggest of those is a decision\nto move back to the east coast. Coming to this decision has shown me, more\nclearly than ever, that I'm scared of radical changes in my personal life. In\nthe past, I would have said that I like change, and that is partly true, at\nleast in the sphere of work mainly with technical things. This experience has\nshown me otherwise.</p>\n<p>I'm learning that radical, fast change, is hard for me. Maybe it's not the\nchange itself, but making that decision to make that change, when it touches so\nmany parts of my life. Looking at the craziness of this week, I can see that\nthis experience is good. I'm looking forward to this next adventure for my\nfamily. Looking at this season of time that I had with my family, has been very\ngood and I have peace about this change as we make the move back.</p>","content":"This week has been a whirlwind of things, but the biggest of those is a decision\nto move back to the east coast. Coming to this decision has shown me, more\nclearly than ever, that I'm scared of radical changes in my personal life. In\nthe past, I would have said that I like change, and that is partly true, at\nleast in the sphere of work mainly with technical things. This experience has\nshown me otherwise.\n\nI'm learning that radical, fast change, is hard for me. Maybe it's not the\nchange itself, but making that decision to make that change, when it touches so\nmany parts of my life. Looking at the craziness of this week, I can see that\nthis experience is good. I'm looking forward to this next adventure for my\nfamily. Looking at this season of time that I had with my family, has been very\ngood and I have peace about this change as we make the move back.","title":"Learning something about myself","date":"2018-08-08T20:31:29.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"family"}]}}},{"type":"contents","id":"lessons-from-unfocused-side-projects","attributes":{"html":"<p>Having worked on a few side-projects, and not having shipped any, I decided to\nanalyze why that is and how to ship my next side-project. The problem for me is\nthat I get excited and start putting in lots of work at the start and slowly get\ntired and move on to the next interesting idea that I have. Then it eats away at\nme in the back of my mind, because I wasn't able to finish the project.</p>\n<p>With my current project [https://github.com/loaves-and-fishes/community-groups],\nI decided to change things, because doing the same thing, hoping for different\nresults is literally the definition of insanity. I've had this project idea on\nmy mind for the last several years and it has grown in scope over that time. I\nhope to ship this project, so I have primarily written this for myself. Having\nsaid that, I do hope that it also helps you in your side-project journey.</p>\n<p>Do Only One Project\nIf things were going to be different, I'd have to forget about all other\nprojects on my backlog, and be focused on this single project. This means no\ngoing after any new shiny ideas, or resurrecting old projects. All other\nprojects are on hold while the current one is active. This will help my mind and\nmy time to be focused.</p>\n<p>Make It Manageable\nMy idea started out small, but has grown over the last few years. If I was to\ntackle that whole idea as my side project, I'd be completely overwhelmed. So\ninstead I've segmented my idea into 3 parts, and chose one of those parts.</p>\n<p>Even one of the parts is big enough to overwhelm. Now it's time to trim down and\nsee what is the smallest app that I can ship that would be a useful tool for my\naudience. This step is important, because products always have more work than\nyou expect.</p>\n<p>Keep Experimentation Minimal\nEvery time I start a new project, I want to try some new tech. Usually this\nkeeps compounding because I try to experiment with multiple areas of the app.\nFor example, my main expertise is in Ember.js [https://emberjs.com/], but I\nwanted to try Polymer for a side project. I realized pretty quickly that I\nshould not experiment at such a big level, because I don't know the tech and\nwill spend more time learning then building my app.</p>\n<p>For my current side project, I decided to experiment with functional/utility\nCSS, i.e. TailwindCSS [https://tailwindcss.com]. This has worked out well so\nfar. It lets me move fast and not have to go all in if I don't want to. Plus the\ncore is still CSS, so I'm not learning something huge.</p>\n<p>Gate Keep Scope Creep\nAs I build the app, I will see small issues that could be addressed to help the\nexperience. These small fixes or enhancements will only grow the size of my\nproject, growing the distance from where I am to where I need to be to ship this\nproject. My goal is to ship something, after that I can reevaluate.</p>\n<p>For example, while building a members list I saw an opportunity to add a\nmultiple tab UI to help distinguish/filter members that were pending on\ninvitation. This is probably something that will eventually make it in, but at\nthis time it's only distracting from shipping my first version. It's better if\nthe users driver that development, or once the app is established.</p>\n<p>Set Personal Checkpoints\nIt's very easy to lose track of when I last worked on my side project,\nespecially I didn't record anything or set any expectations. All of a sudden a\nyear has gone by and I have little to show for it. The first step is to set an\ninternal deadline that I will try to reach. The second step is to split up\nchunks of work into checkpoints of sorts. With this kind of setup I'll have an\nend in sight and stepping stones that will help me track your progress.</p>\n<p>I'm going to start doing that by using the \"Projects\" feature in Github. This\ndoesn't introduce any new tools to my workflow, which I think is important to\nkeep the overhead small.</p>\n<p>Work In Public\nWhen no one knows what I'm up too, it's easy to just give up or move on to the\nnext big thing. Once I'm accountable, things change, because I've involved\nothers. It's a form of internal motivation, as well as external. For programming\nside-projects this usually starts as working in public with an open repository\nright from the beginning. I can also choose to share my work on social media\n(like Twitter) or record/stream videos on services like YouTube or Twitch.</p>\n<p>For my project I'm recording videos on YouTube (here\n[https://www.youtube.com/watch?v=EXvT4bUZqHg&amp;list=PLfQwL10yab39zHh-4Ub-u9IqwS5C0yHsE]\n) and posting on Twitter. I also have it public on Github (here\n[https://github.com/loaves-and-fishes/community-groups]). Beyond that, I also\nincluded it in a blog post (this one).</p>\n<p>Ship It\nThis might sounds silly, but this is probably the biggest step to have a focused\nside-project. If I never ship my side-project, then I don't really know if I\nenjoy the full process. Plus preparing my project for shipping is much more\ninvolved then I might realize, and if it's skipped, I miss a big portion of the\nfull process. After shipping, I can decide if the project is finished, or if I\nwant to continue.</p>\n<p>If I've been working in public, then I will probably have at least a small\naudience, and have some potential users. Shipping will bring on new eyes and\nfeedback. Maybe I'll have clients or maybe learn that the project was a good\nexercise and nothing more. Even if I end it here, I'll have gone to the end, and\nnow have a portfolio item, and the experience that I've gained.</p>\n<p>Summarize Your Learnings\nNow that I've shipped (and maybe iterated a bit more), it is important that I\nsit down and write my thoughts out regarding this process. What did I enjoy or\nmaybe not like one bit? Were there struggles along the way, what were they? Will\nI build something like this again? Was it worth it? I should write this down and\nmaybe share it in a blog post (that's up to me). Next time I decide to start a\nnew side-project, or maybe consider investing more time into this one, I'll at\nleast have some idea of what I enjoy building and my strengths and weaknesses.\nI'll know where to spend more time to improve or what areas to avoid\nall-together.</p>\n<p>By finishing a side-project, I'll grow and learn about myself. But &nbsp;I must also\nremember, sometimes an idea just doesn't work out or I might learn early on that\nit's not right for me. In a situation like this, I shouldn't feel guilt/shame\nfor not finishing the project. Make a clear break, write down my learnings, and\nmove on.</p>","content":"Having worked on a few side-projects, and not having shipped any, I decided to\nanalyze why that is and how to ship my next side-project. The problem for me is\nthat I get excited and start putting in lots of work at the start and slowly get\ntired and move on to the next interesting idea that I have. Then it eats away at\nme in the back of my mind, because I wasn't able to finish the project.\n\nWith my current project [https://github.com/loaves-and-fishes/community-groups],\nI decided to change things, because doing the same thing, hoping for different\nresults is literally the definition of insanity. I've had this project idea on\nmy mind for the last several years and it has grown in scope over that time. I\nhope to ship this project, so I have primarily written this for myself. Having\nsaid that, I do hope that it also helps you in your side-project journey.\n\nDo Only One Project\nIf things were going to be different, I'd have to forget about all other\nprojects on my backlog, and be focused on this single project. This means no\ngoing after any new shiny ideas, or resurrecting old projects. All other\nprojects are on hold while the current one is active. This will help my mind and\nmy time to be focused.\n\nMake It Manageable\nMy idea started out small, but has grown over the last few years. If I was to\ntackle that whole idea as my side project, I'd be completely overwhelmed. So\ninstead I've segmented my idea into 3 parts, and chose one of those parts.\n\nEven one of the parts is big enough to overwhelm. Now it's time to trim down and\nsee what is the smallest app that I can ship that would be a useful tool for my\naudience. This step is important, because products always have more work than\nyou expect.\n\nKeep Experimentation Minimal\nEvery time I start a new project, I want to try some new tech. Usually this\nkeeps compounding because I try to experiment with multiple areas of the app.\nFor example, my main expertise is in Ember.js [https://emberjs.com/], but I\nwanted to try Polymer for a side project. I realized pretty quickly that I\nshould not experiment at such a big level, because I don't know the tech and\nwill spend more time learning then building my app.\n\nFor my current side project, I decided to experiment with functional/utility\nCSS, i.e. TailwindCSS [https://tailwindcss.com]. This has worked out well so\nfar. It lets me move fast and not have to go all in if I don't want to. Plus the\ncore is still CSS, so I'm not learning something huge.\n\nGate Keep Scope Creep\nAs I build the app, I will see small issues that could be addressed to help the\nexperience. These small fixes or enhancements will only grow the size of my\nproject, growing the distance from where I am to where I need to be to ship this\nproject. My goal is to ship something, after that I can reevaluate.\n\nFor example, while building a members list I saw an opportunity to add a\nmultiple tab UI to help distinguish/filter members that were pending on\ninvitation. This is probably something that will eventually make it in, but at\nthis time it's only distracting from shipping my first version. It's better if\nthe users driver that development, or once the app is established.\n\nSet Personal Checkpoints\nIt's very easy to lose track of when I last worked on my side project,\nespecially I didn't record anything or set any expectations. All of a sudden a\nyear has gone by and I have little to show for it. The first step is to set an\ninternal deadline that I will try to reach. The second step is to split up\nchunks of work into checkpoints of sorts. With this kind of setup I'll have an\nend in sight and stepping stones that will help me track your progress.\n\nI'm going to start doing that by using the \"Projects\" feature in Github. This\ndoesn't introduce any new tools to my workflow, which I think is important to\nkeep the overhead small.\n\nWork In Public\nWhen no one knows what I'm up too, it's easy to just give up or move on to the\nnext big thing. Once I'm accountable, things change, because I've involved\nothers. It's a form of internal motivation, as well as external. For programming\nside-projects this usually starts as working in public with an open repository\nright from the beginning. I can also choose to share my work on social media\n(like Twitter) or record/stream videos on services like YouTube or Twitch.\n\nFor my project I'm recording videos on YouTube (here\n[https://www.youtube.com/watch?v=EXvT4bUZqHg&list=PLfQwL10yab39zHh-4Ub-u9IqwS5C0yHsE]\n) and posting on Twitter. I also have it public on Github (here\n[https://github.com/loaves-and-fishes/community-groups]). Beyond that, I also\nincluded it in a blog post (this one).\n\nShip It\nThis might sounds silly, but this is probably the biggest step to have a focused\nside-project. If I never ship my side-project, then I don't really know if I\nenjoy the full process. Plus preparing my project for shipping is much more\ninvolved then I might realize, and if it's skipped, I miss a big portion of the\nfull process. After shipping, I can decide if the project is finished, or if I\nwant to continue.\n\nIf I've been working in public, then I will probably have at least a small\naudience, and have some potential users. Shipping will bring on new eyes and\nfeedback. Maybe I'll have clients or maybe learn that the project was a good\nexercise and nothing more. Even if I end it here, I'll have gone to the end, and\nnow have a portfolio item, and the experience that I've gained.\n\nSummarize Your Learnings\nNow that I've shipped (and maybe iterated a bit more), it is important that I\nsit down and write my thoughts out regarding this process. What did I enjoy or\nmaybe not like one bit? Were there struggles along the way, what were they? Will\nI build something like this again? Was it worth it? I should write this down and\nmaybe share it in a blog post (that's up to me). Next time I decide to start a\nnew side-project, or maybe consider investing more time into this one, I'll at\nleast have some idea of what I enjoy building and my strengths and weaknesses.\nI'll know where to spend more time to improve or what areas to avoid\nall-together.\n\nBy finishing a side-project, I'll grow and learn about myself. But  I must also\nremember, sometimes an idea just doesn't work out or I might learn early on that\nit's not right for me. In a situation like this, I shouldn't feel guilt/shame\nfor not finishing the project. Make a clear break, write down my learnings, and\nmove on.","title":"Lessons From Unfocused Side Projects","date":"2019-01-13T22:35:36.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"},{"type":"tags","id":"side-projects"},{"type":"tags","id":"lessons"},{"type":"tags","id":"focused"}]}}},{"type":"contents","id":"moved-back-to-michigan","attributes":{"html":"<p>Had a bunch of friends from Sojourn church come and help unload today, it was a blessing to us to have friends that really care. It's one of the reasons\nthat we moved back to Traverse City (not directly, but close enough to TC), mainly that it's harder and harder to find good friends as you get older. It's been difficult for me especially, so I'm learning to reach out more and to listen more than speaking.</p>\n<p>I also love the slower pace of life, as compared to the east coast, and want to slow down a bit more. I think my goal this year will be to slow down from the hustle and hurry and to just breathe. This means doing things outside of tech, like woodworking maybe, and spending more time outdoors and with friends. Also looking for more opportunities to listen, help, and share Jesus. I plan to spend less time on Twitter as well, and more time writing. I'm writing every day this month and it feels so good.</p>","content":"Had a bunch of friends from Sojourn church come and help unload today, it was a blessing to us to have friends that really care. It's one of the reasons\nthat we moved back to Traverse City (not directly, but close enough to TC), mainly that it's harder and harder to find good friends as you get older. It's been difficult for me especially, so I'm learning to reach out more and to listen more than speaking.\n\nI also love the slower pace of life, as compared to the east coast, and want to slow down a bit more. I think my goal this year will be to slow down from the hustle and hurry and to just breathe. This means doing things outside of tech, like woodworking maybe, and spending more time outdoors and with friends. Also looking for more opportunities to listen, help, and share Jesus. I plan to spend less time on Twitter as well, and more time writing. I'm writing every day this month and it feels so good.","title":"Moved Back To Michigan","date":"2020-01-05T03:59:24.224Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"one-reason-why-you-should-be-using-urls","attributes":{"html":"<p>One of the reasons that <a href=\"https://emberjs.com\">Ember.js</a> is so powerful of a framework is because of its Router, and ultimately its bet on the web and the fact that the URL is important.\nWith Ember's router, the URL becomes a nested state-machine for your app, which is one of the reasons you should be using URLs in your app whenever you can. Let me explain a bit.</p>\n<p>I'm just learning about state-machines, and from what I can tell one of the basics is that in the most simplest of state-machines, you represent a single state that can happen at one time. So for example, <code>fetching</code> or <code>errored</code> for an AJAX request, you cannot be in both states. Ember.js gives you these two for free in the router, the <a href=\"https://guides.emberjs.com/release/routing/loading-and-error-substates/#toc_loading-substates\"><code>loading</code></a> and <a href=\"https://guides.emberjs.com/release/routing/loading-and-error-substates/#toc_error-substates\"><code>errored</code></a> routes (or substates as the guides call them).</p>\n<p>The way that Ember has routes and UI setup promotes these exclusive states in the UI, because nested routes map to nested UI. So if you have a wizard UI for an onboarding kind of experience, you can model each step of that onboarding flow as a nested route:</p>\n<pre><code class=\"js language-js\">this.route('onboarding', function () {\n  // 'index' is predefined and is step 0\n  this.route('step1');\n  this.route('step2');\n  this.route('step3');\n  // 'loading' is predefined\n  // 'errored' is predefined\n});\n</code></pre>\n<p>As you can see, if you visit <code>onboarding</code> you will land on the <code>index</code> route, which can be step 0 or can redirect you to the correct step. This is the initial state of our onboarding state-machine. If the <code>index</code> route loads something, it will transition to <code>loading</code> before rendering. So you can only be in one of the substates of the <code>onboarding</code> route.</p>\n<p>You can now transition from <code>index</code> to another sibling route using <code>transitionTo</code> on the <a href=\"https://api.emberjs.com/ember/release/classes/RouterService\"><code>router</code> service</a> or on routes (<code>transitionToRoute</code> in a controller). Something like <code>this.router.transitionTo('onboarding.step1')</code>. Once again <code>loading</code> and maybe <code>errored</code> will be entered during/after the <code>model</code> loading phase. Using this structure to define nested UI, since the child routes are nested in whatever UI is defined in the <code>onboarding</code> template, allows you to define exclusive states and prevents subtle bugs that might creep up if you decided to handle these steps using <code>{{#if (eq this.step 'step1')}}</code> syntax, especially if you have multiple if statements for the same state for different pieces of UI, it makes it hard to reason about and allows your app to be in unknown states you didn't intent.</p>\n<p>So in closing, the URL is important, because it drives nested UI in a state-machine fashion which keeps your app easier to understand, read, and prevents bugs in many cases.</p>\n<p>If you want to read more about routing, check out my post about <a href=\"https://ilyaradchenko.com/using-nested-routes-in-ember\">Using Nested Routes In Ember</a>.</p>","content":"One of the reasons that [Ember.js](https://emberjs.com) is so powerful of a framework is because of its Router, and ultimately its bet on the web and the fact that the URL is important.\nWith Ember's router, the URL becomes a nested state-machine for your app, which is one of the reasons you should be using URLs in your app whenever you can. Let me explain a bit.\n\nI'm just learning about state-machines, and from what I can tell one of the basics is that in the most simplest of state-machines, you represent a single state that can happen at one time. So for example, `fetching` or `errored` for an AJAX request, you cannot be in both states. Ember.js gives you these two for free in the router, the [`loading`](https://guides.emberjs.com/release/routing/loading-and-error-substates/#toc_loading-substates) and [`errored`](https://guides.emberjs.com/release/routing/loading-and-error-substates/#toc_error-substates) routes (or substates as the guides call them).\n\nThe way that Ember has routes and UI setup promotes these exclusive states in the UI, because nested routes map to nested UI. So if you have a wizard UI for an onboarding kind of experience, you can model each step of that onboarding flow as a nested route:\n\n```js\nthis.route('onboarding', function () {\n  // 'index' is predefined and is step 0\n  this.route('step1');\n  this.route('step2');\n  this.route('step3');\n  // 'loading' is predefined\n  // 'errored' is predefined\n});\n```\n\nAs you can see, if you visit `onboarding` you will land on the `index` route, which can be step 0 or can redirect you to the correct step. This is the initial state of our onboarding state-machine. If the `index` route loads something, it will transition to `loading` before rendering. So you can only be in one of the substates of the `onboarding` route.\n\nYou can now transition from `index` to another sibling route using `transitionTo` on the [`router` service](https://api.emberjs.com/ember/release/classes/RouterService) or on routes (`transitionToRoute` in a controller). Something like `this.router.transitionTo('onboarding.step1')`. Once again `loading` and maybe `errored` will be entered during/after the `model` loading phase. Using this structure to define nested UI, since the child routes are nested in whatever UI is defined in the `onboarding` template, allows you to define exclusive states and prevents subtle bugs that might creep up if you decided to handle these steps using `{{#if (eq this.step 'step1')}}` syntax, especially if you have multiple if statements for the same state for different pieces of UI, it makes it hard to reason about and allows your app to be in unknown states you didn't intent.\n\nSo in closing, the URL is important, because it drives nested UI in a state-machine fashion which keeps your app easier to understand, read, and prevents bugs in many cases.\n\nIf you want to read more about routing, check out my post about [Using Nested Routes In Ember](https://ilyaradchenko.com/using-nested-routes-in-ember).","title":"One Reason Why You Should Be Using URLs","date":"2020-01-03T03:40:30.290Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"quotes-project","attributes":{"html":"<p>Recently I've been reading more non-fiction, specifically Christian non-fiction\nwriting. During my reading I've been encountering many uplifting and deep quotes\nfrom authors of the past as well as modern day authors. I realized that I've\nread many quotes in the past, but for some reason this time I was convicted (or\nsomething) that I should record the quotes that I find beneficial for myself.</p>\n<p>Not all those who wander are lost. — J.R.R. Tolkien</p>\n<p>With this idea in mind, I decided to make my quote list opensource, so that it\ncan be accessed by a different audience than just people on Twitter. Since I'm a\nweb application developer, I figure that I have greater influence in that area,\nso Github seemed to be the best place for these quotes. Not to make a greater\nname for myself, but to have these quotes be a blessing and a beginning for\nsomeone.</p>\n<p>He is no fool who gives what he cannot keep to gain that which he cannot lose. —\nJames Elliot</p>\n<p>So this is the repo [https://github.com/knownasilya/quotes]  along with the\n\"polished\" site [http://knownasilya.github.io/quotes/]. If you enjoy the quotes,\nfeel free to star the repo. Also if you find a quote that makes sense for the\nlist, please submit a pull request.</p>","content":"Recently I've been reading more non-fiction, specifically Christian non-fiction\nwriting. During my reading I've been encountering many uplifting and deep quotes\nfrom authors of the past as well as modern day authors. I realized that I've\nread many quotes in the past, but for some reason this time I was convicted (or\nsomething) that I should record the quotes that I find beneficial for myself.\n\nNot all those who wander are lost. — J.R.R. Tolkien\n\nWith this idea in mind, I decided to make my quote list opensource, so that it\ncan be accessed by a different audience than just people on Twitter. Since I'm a\nweb application developer, I figure that I have greater influence in that area,\nso Github seemed to be the best place for these quotes. Not to make a greater\nname for myself, but to have these quotes be a blessing and a beginning for\nsomeone.\n\nHe is no fool who gives what he cannot keep to gain that which he cannot lose. —\nJames Elliot\n\nSo this is the repo [https://github.com/knownasilya/quotes]  along with the\n\"polished\" site [http://knownasilya.github.io/quotes/]. If you enjoy the quotes,\nfeel free to star the repo. Also if you find a quote that makes sense for the\nlist, please submit a pull request.","title":"Quotes Project","date":"2016-04-05T16:00:38.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[]}}},{"type":"contents","id":"running-component-css-and-css-modules-in-the-same-app","attributes":{"html":"<p>With Ember Octane <a href=\"https://blog.emberjs.com/2019/12/20/octane-is-here.html\">now released</a> it's a good time to start looking at upgrading that app. One of the issues we faced at Crash with upgrading is that Ember Component CSS doesn't support Glimmer components and even breaks on classic components because of some changes to the framework. So we decided to run Component CSS alongside CSS Modules, because we have a good amount of CSS (as do most apps). I won't go into why we decided to use CSS Modules (a post coming in the future on this topic), but I will show you how to get them running together.</p>\n<p>First, install both dependencies. Second you need to tell Component CSS to not run CSS Module files, so add this to your <code>config/environment.js</code>:</p>\n<pre><code>ENV['ember-component-css'] = {\n  // ignore css-modules styles\n  excludeFromManifest: ['**/*.module.scss']\n};\n</code></pre>\n<p>We decided to use <code>styles.module.scss</code> as the name for CSS Modules, and Component CSS uses <code>styles.scss</code>. To get CSS Modules to use this format, we need another config, this time in <code>ember-cli-build.js</code></p>\n<pre><code>const nested = require('postcss-nested');\n// ...\ncssModules: {\n  extension: 'module.scss',\n  intermediateOutputPath: 'app/styles/_modules.scss',\n  plugins: {\n    before: [nested]\n  }\n},\n</code></pre>\n<blockquote>\n  <p>Notice that you need to install <code>postcss-nested</code> to allow for nested syntax and nested <code>:global</code> selector.</p>\n</blockquote>\n<p>Now in <code>app/styles/app.scss</code> you need to add the modules import after the pods import:</p>\n<pre><code class=\"scss language-scss\">@import 'pod-styles.scss';\n@import 'modules';\n</code></pre>\n<p>Don't forget to also install <code>ember-css-modules-sass</code> to support SASS. And that should be it, let me know if you run into any issues on Twitter.</p>","content":"With Ember Octane [now released](https://blog.emberjs.com/2019/12/20/octane-is-here.html) it's a good time to start looking at upgrading that app. One of the issues we faced at Crash with upgrading is that Ember Component CSS doesn't support Glimmer components and even breaks on classic components because of some changes to the framework. So we decided to run Component CSS alongside CSS Modules, because we have a good amount of CSS (as do most apps). I won't go into why we decided to use CSS Modules (a post coming in the future on this topic), but I will show you how to get them running together.\n\nFirst, install both dependencies. Second you need to tell Component CSS to not run CSS Module files, so add this to your `config/environment.js`:\n\n```\nENV['ember-component-css'] = {\n  // ignore css-modules styles\n  excludeFromManifest: ['**/*.module.scss']\n};\n```\n\nWe decided to use `styles.module.scss` as the name for CSS Modules, and Component CSS uses `styles.scss`. To get CSS Modules to use this format, we need another config, this time in `ember-cli-build.js`\n\n```\nconst nested = require('postcss-nested');\n// ...\ncssModules: {\n  extension: 'module.scss',\n  intermediateOutputPath: 'app/styles/_modules.scss',\n  plugins: {\n    before: [nested]\n  }\n},\n```\n\n> Notice that you need to install `postcss-nested` to allow for nested syntax and nested `:global` selector.\n\nNow in `app/styles/app.scss` you need to add the modules import after the pods import:\n\n```scss\n@import 'pod-styles.scss';\n@import 'modules';\n```\n\nDon't forget to also install `ember-css-modules-sass` to support SASS. And that should be it, let me know if you run into any issues on Twitter.","title":"Running Component CSS and CSS Modules in the Same App","date":"2020-01-03T23:02:29.750Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"sharing-components-with-engines","attributes":{"html":"<p>Is this what I'm looking for?\nYou have at least one engine and you want to share components from your parent\napp without having an in-repo-addon to share the common components. You might\nalso want fine-grain control over how the components are setup and what data\ncomes over. Most likely these are not UI-only components, but they deal with\nyour app data and business logic.</p>\n<p>I'm hear to tell you that it's possible, but it's a manual process that involves\nusing some \"advanced\" concepts that Ember introduced in v2. So lets dig in and\nsee what that looks like.</p>\n<p>What it looks like\nI'm going to jump to the end and show you the result, then we'll go back and\ncover how to implement this in your app.</p>\n<p>We start with the template in your engine:</p>\n<p>It looks very simple, notice that the above is a component, and it's being\nrendered using dot notation off of a share  service.</p>\n<p>Now that we see how it's used, lets see how it's setup in our parent app.</p>\n<p>The above uses a custom component called share-ui  which acts like a proxy to\nour share  service. Then we use the built-in hash  helper which basically just\ncreates an object and passes it as an \"argument\" to our component.</p>\n<p>You should alos notice that we use the component  helper, which lets us\ndynamically setup a component without calling it. In the above example we passed\nthe user  from our parent application template context.</p>\n<p>Lets implement it\nWe need two things to make this work, a share  service and the share-ui \ncomponent. Lets start with the service.</p>\n<p>I make an assumption that you have already setup your app and engine, since\nthose two steps are documented elsewhere, I'll skip them for brevity.</p>\n<p>share  service\nWe'll create our service first:</p>\n<p>It should look like so:</p>\n<p>This is all that needs to be done for the service. Make sure to share the\nservice with your engine:</p>\n<p>Then in our engine we also define it:</p>\n<p>share-ui  component\nNow that we have our service, lets create our component and\nwire it all together.</p>\n<p>We'll start by injecting our service into the share-ui  component:</p>\n<p>Notice that we also have tagName  set, that is to prevent adding an unneeded div\nelement into the DOM, since we aren't rendering any UI with this component. Now\nthat our component can communicate with our service, we need to set the \ncomponent  argument on our service, so lets do that:</p>\n<p>We should now have the functionallity that we presented above. The on thing we\nmissed is actually using the service in our engine, so just inject it\nin your component or controller, depending on where you use your shared\ncomponents.</p>\n<p>Note: Make sure to use the share-ui  component in a parent template that will\nalways be visible when the engine is used. I recommend the application \ntemplate.</p>\n<p>What now?\nThe above example is powerful enough to support additional sharing, like helper\nand data. You can also share items from addons in your parent application,\npreventing duplication of addons between parent and engines.</p>\n<p>If you want to go further, you can even build a theming system ontop of this\nsetup by defining UI components for each theme and having an attribute on the \nshare-ui  component that toggles between the different component sets.</p>\n<p>Feel free to connect via Twitter if you have any comments/suggestions.</p>","content":"Is this what I'm looking for?\nYou have at least one engine and you want to share components from your parent\napp without having an in-repo-addon to share the common components. You might\nalso want fine-grain control over how the components are setup and what data\ncomes over. Most likely these are not UI-only components, but they deal with\nyour app data and business logic.\n\nI'm hear to tell you that it's possible, but it's a manual process that involves\nusing some \"advanced\" concepts that Ember introduced in v2. So lets dig in and\nsee what that looks like.\n\nWhat it looks like\nI'm going to jump to the end and show you the result, then we'll go back and\ncover how to implement this in your app.\n\nWe start with the template in your engine:\n\n\n\nIt looks very simple, notice that the above is a component, and it's being\nrendered using dot notation off of a share  service.\n\nNow that we see how it's used, lets see how it's setup in our parent app.\n\n\n\nThe above uses a custom component called share-ui  which acts like a proxy to\nour share  service. Then we use the built-in hash  helper which basically just\ncreates an object and passes it as an \"argument\" to our component.\n\nYou should alos notice that we use the component  helper, which lets us\ndynamically setup a component without calling it. In the above example we passed\nthe user  from our parent application template context.\n\nLets implement it\nWe need two things to make this work, a share  service and the share-ui \ncomponent. Lets start with the service.\n\nI make an assumption that you have already setup your app and engine, since\nthose two steps are documented elsewhere, I'll skip them for brevity.\n\nshare  service\nWe'll create our service first:\n\n\n\nIt should look like so:\n\n\n\nThis is all that needs to be done for the service. Make sure to share the\nservice with your engine:\n\n\n\nThen in our engine we also define it:\n\n\n\nshare-ui  component\nNow that we have our service, lets create our component and\nwire it all together.\n\n\n\nWe'll start by injecting our service into the share-ui  component:\n\n\n\nNotice that we also have tagName  set, that is to prevent adding an unneeded div\nelement into the DOM, since we aren't rendering any UI with this component. Now\nthat our component can communicate with our service, we need to set the \ncomponent  argument on our service, so lets do that:\n\n\n\nWe should now have the functionallity that we presented above. The on thing we\nmissed is actually using the service in our engine, so just inject it\nin your component or controller, depending on where you use your shared\ncomponents.\n\nNote: Make sure to use the share-ui  component in a parent template that will\nalways be visible when the engine is used. I recommend the application \ntemplate.\n\nWhat now?\nThe above example is powerful enough to support additional sharing, like helper\nand data. You can also share items from addons in your parent application,\npreventing duplication of addons between parent and engines.\n\nIf you want to go further, you can even build a theming system ontop of this\nsetup by defining UI components for each theme and having an attribute on the \nshare-ui  component that toggles between the different component sets.\n\nFeel free to connect via Twitter if you have any comments/suggestions.","title":"Sharing Components with Engines","date":"2018-03-19T14:02:57.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"},{"type":"tags","id":"components"},{"type":"tags","id":"engines"}]}}},{"type":"contents","id":"use-ember-cli","attributes":{"html":"<p>I've been using Ember.js since just before the first RC, and since then I've\nbeen wanting a sane project structure that just works. This was a struggle,\nsince Ember told you to put everything on App.. :(</p>\n<p>After I heard about the proposed POD structure, I started working on emberate\n[https://github.com/AppGeo/emberate], which took a directory and processed the\nfiles in a way where you didn't have to deal with App, you'd just module.export \nwhatever code the file was about.</p>\n<p>Now mix emberate, browserify, and gulp  and you have a pretty decent build\nsystem, right? Well, something was missing, because it would be very brittle,\nand it's features were kinda barebones. There was more to be desired, and yes I\ntried ember-app-kit, but it was too bulky and required you to learn so many \ngrunt  plugins, that it was total overhead.</p>\n<p>Enter, ember-cli, yes it's not perfect, but it's the best thing we have for a\nbuild system that works. It's maintained by several of the Ember core team, and\nmany other awesome contributors\n[https://github.com/ember-cli/ember-cli/graphs/contributors]. Not only does it\nsupport browserify [https://github.com/ef4/ember-browserify], but ES6 as well.\nThere are generators, e.g. ember g  and ember d, like Rails had, and POD\nsupport. Not mentioning the addon system, http mocking with node.js, and\nbuild/server watching.</p>\n<p>There is no reason to not use it if you do anything that needs a build step.\nEven if you don't need one, it makes the structure uniform and anyone can come\nin and know what's up. It has the same goals as Ember, and there are even plans \nto make it official.</p>\n<p>In Ember 2.0, Ember CLI and ES6 modules will become first-class parts of the\nEmber experience.</p>\n<p>Ember 2.0 RFC by Ember Team</p>\n<p>Ember CLI will be a big part of the transition from Ember 1.x to Ember 2.x,\nwhich is supposed to be a gradual transition from versions 1.10.0 and onward.\nTwo-Point-O will just remove the deprecated features.</p>\n<p>You should begin moving your app to Ember CLI as soon as possible.</p>\n<p>Plus there is a huge community that is writting addons [emberaddons.com]  for\nEmber CLI. You can write your own too; I wrote pagination-pager\n[https://www.npmjs.org/package/pagination-pager], ember-cli-toggle\n[https://www.npmjs.org/package/ember-cli-toggle]  and ember-cli-pen\n[https://www.npmjs.org/package/ember-cli-pen]  (more to come). I also use a few\nof them, like liquid-fire [https://github.com/ef4/liquid-fire], ember-notify\n[https://github.com/aexmachina/ember-notify], ember-cli-less\n[https://github.com/gdub22/ember-cli-less], ember-browserify\n[https://github.com/ef4/ember-browserify], and others!</p>\n<p>So use it today, and you wont regret it tomorrow! Check out ember-cli.com\n[http://ember-cli.com]  to get started.</p>\n<p>P.S. Check out this gist by Sam Selikoff [https://github.com/samselikoff]  on\nhow to future proof [https://gist.github.com/samselikoff/1d7300ce59d216fdaf97] \nyour Ember app.</p>","content":"I've been using Ember.js since just before the first RC, and since then I've\nbeen wanting a sane project structure that just works. This was a struggle,\nsince Ember told you to put everything on App.. :(\n\nAfter I heard about the proposed POD structure, I started working on emberate\n[https://github.com/AppGeo/emberate], which took a directory and processed the\nfiles in a way where you didn't have to deal with App, you'd just module.export \nwhatever code the file was about.\n\nNow mix emberate, browserify, and gulp  and you have a pretty decent build\nsystem, right? Well, something was missing, because it would be very brittle,\nand it's features were kinda barebones. There was more to be desired, and yes I\ntried ember-app-kit, but it was too bulky and required you to learn so many \ngrunt  plugins, that it was total overhead.\n\nEnter, ember-cli, yes it's not perfect, but it's the best thing we have for a\nbuild system that works. It's maintained by several of the Ember core team, and\nmany other awesome contributors\n[https://github.com/ember-cli/ember-cli/graphs/contributors]. Not only does it\nsupport browserify [https://github.com/ef4/ember-browserify], but ES6 as well.\nThere are generators, e.g. ember g  and ember d, like Rails had, and POD\nsupport. Not mentioning the addon system, http mocking with node.js, and\nbuild/server watching.\n\nThere is no reason to not use it if you do anything that needs a build step.\nEven if you don't need one, it makes the structure uniform and anyone can come\nin and know what's up. It has the same goals as Ember, and there are even plans \nto make it official.\n\nIn Ember 2.0, Ember CLI and ES6 modules will become first-class parts of the\nEmber experience.\n\nEmber 2.0 RFC by Ember Team\n\nEmber CLI will be a big part of the transition from Ember 1.x to Ember 2.x,\nwhich is supposed to be a gradual transition from versions 1.10.0 and onward.\nTwo-Point-O will just remove the deprecated features.\n\nYou should begin moving your app to Ember CLI as soon as possible.\n\nPlus there is a huge community that is writting addons [emberaddons.com]  for\nEmber CLI. You can write your own too; I wrote pagination-pager\n[https://www.npmjs.org/package/pagination-pager], ember-cli-toggle\n[https://www.npmjs.org/package/ember-cli-toggle]  and ember-cli-pen\n[https://www.npmjs.org/package/ember-cli-pen]  (more to come). I also use a few\nof them, like liquid-fire [https://github.com/ef4/liquid-fire], ember-notify\n[https://github.com/aexmachina/ember-notify], ember-cli-less\n[https://github.com/gdub22/ember-cli-less], ember-browserify\n[https://github.com/ef4/ember-browserify], and others!\n\nSo use it today, and you wont regret it tomorrow! Check out ember-cli.com\n[http://ember-cli.com]  to get started.\n\nP.S. Check out this gist by Sam Selikoff [https://github.com/samselikoff]  on\nhow to future proof [https://gist.github.com/samselikoff/1d7300ce59d216fdaf97] \nyour Ember app.","title":"Use Ember CLI","date":"2015-01-15T21:07:17.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"},{"type":"tags","id":"ember-cli"}]}}},{"type":"contents","id":"using-nested-routes-in-ember","attributes":{"html":"<p>In my <a href=\"https://ilyaradchenko.com/ember's-nested-routes-and-urls-explored\">last post</a> I mentioned how nested routes don't make sense sometimes, which means that they do have their uses at other times, which I want to cover here. I think the example I used in my last post wasn't clear enough, because what I meant to communicate is that if you want a nested URL structure, it doesn't always mean you need nested routes. I'd like to cover a scenarios that works really well with nested routes.</p>\n<h2 id=\"whenyouhavemanyresources\">When You Have Many Resources</h2>\n<p>The first is an app that is heavily CRUD (create read update delete) focused and has more than ~3 resources. In these scenarios it helps to nest, because you end up with a clean folder structure, e.g.</p>\n<ul>\n<li><code>app</code></li>\n<li><code>pods</code><ul>\n<li><code>users</code></li>\n<li><code>groups</code></li>\n<li><code>articles</code></li>\n<li><code>categories</code></li></ul></li>\n</ul>\n<p>Which I'd model like this in the router map:</p>\n<pre><code class=\"js language-js\">this.route('categories', function () {\n  // 'index' route is implicit and is for listing/filtering users\n  this.route('create');\n  this.route('category', { path: '/:categoryId' }, function () {\n    // 'index' route is implicit and is for viewing the user\n    this.route('edit');\n  });\n});\n</code></pre>\n<p>This pattern works really well because all sub-routes have access to the <code>users</code> route, and usually in ambitious CRUD apps you need to load some related dynamic data, like values for dropdowns that can be loaded at the top route and used with <code>this.modelFor('users')</code> in the child routes. This is usually useful in the <code>users.index</code> for filtering using a dropdown and in <code>users.create</code> and <code>users.user.edit</code> for selecting the value to create/update.</p>\n<p>At the <code>users.user</code> route, you'd load the actual model for viewing or editing, and the child routes would consume that via <code>modelFor</code>.</p>\n<p>This would create the following urls:</p>\n<ul>\n<li>/categories</li>\n<li>/categories/create</li>\n<li>/categories/1234</li>\n<li>/categories/1234/edit</li>\n</ul>\n<h2 id=\"whatabout\">What About… ?</h2>\n<p>The above works really well, but the idea is that it's about organizing items into related groups that are talking about one thing. So scenarios where you have public routes and authenticated routes will also fall in this category. Wizards that have steps that should be url accessible also should be nested. Routes are kind of like state machines, where sibling routes are the states that the parent route can be in, and the <code>index</code> is the initial state.</p>\n<p>If your UI is nested and needs to be URL accessible at the different levels of nesting, use nested routes.</p>","content":"In my [last post](https://ilyaradchenko.com/ember's-nested-routes-and-urls-explored) I mentioned how nested routes don't make sense sometimes, which means that they do have their uses at other times, which I want to cover here. I think the example I used in my last post wasn't clear enough, because what I meant to communicate is that if you want a nested URL structure, it doesn't always mean you need nested routes. I'd like to cover a scenarios that works really well with nested routes.\n\n## When You Have Many Resources\n\nThe first is an app that is heavily CRUD (create read update delete) focused and has more than ~3 resources. In these scenarios it helps to nest, because you end up with a clean folder structure, e.g.\n\n- `app`\n  - `pods`\n    - `users`\n    - `groups`\n    - `articles`\n    - `categories`\n\nWhich I'd model like this in the router map:\n\n```js\nthis.route('categories', function () {\n  // 'index' route is implicit and is for listing/filtering users\n  this.route('create');\n  this.route('category', { path: '/:categoryId' }, function () {\n    // 'index' route is implicit and is for viewing the user\n    this.route('edit');\n  });\n});\n```\n\nThis pattern works really well because all sub-routes have access to the `users` route, and usually in ambitious CRUD apps you need to load some related dynamic data, like values for dropdowns that can be loaded at the top route and used with `this.modelFor('users')` in the child routes. This is usually useful in the `users.index` for filtering using a dropdown and in `users.create` and `users.user.edit` for selecting the value to create/update.\n\nAt the `users.user` route, you'd load the actual model for viewing or editing, and the child routes would consume that via `modelFor`.\n\nThis would create the following urls:\n\n- /categories\n- /categories/create\n- /categories/1234\n- /categories/1234/edit\n\n## What About... ?\n\nThe above works really well, but the idea is that it's about organizing items into related groups that are talking about one thing. So scenarios where you have public routes and authenticated routes will also fall in this category. Wizards that have steps that should be url accessible also should be nested. Routes are kind of like state machines, where sibling routes are the states that the parent route can be in, and the `index` is the initial state.\n\nIf your UI is nested and needs to be URL accessible at the different levels of nesting, use nested routes.","title":"Using Nested Routes In Ember.js","date":"2019-12-06T14:19:07.652Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"ember-js"}]}}},{"type":"contents","id":"what-im-listening-to","attributes":{"html":"<p>I've been listening to a few podcasts in several different categories and wanted\nto share some of those with you.</p>\n<p>Development</p>\n<ul>\n<li>EmberMap [https://embermap.com/podcast]  - An Ember.js focused podcast with\nhosts Sam and Ryan, where they talk about not only Ember.js, but product\ndevelopment in general. Lots of insight here and always a fun listen.</li>\n<li>The Frontside [https://frontside.io/podcast/]  - A podcast from the Frontside\nconsultancy which has historically been in the Ember.js community and\nrecently have released the Microstates.js library. This podcast recently did\na reboot, and I'm excited to hear more of that.</li>\n<li>Build Your SaaS [https://saas.transistor.fm/]  - A podcast documenting the\njourney that two co-founders are going down while building their SaaS\n(Trasistor.fm, podcast hosting service). Real and insightful at the same\ntime.</li>\n<li>Art of Product [https://open.spotify.com/show/4AFHekKU9OMJnS0GLSG5sX]  - The\njourney of two startup founders n the process of building their products.\nLots of nuggets and just raw honesty regarding the challenges and successes\nof being a founder and building good products.</li>\n<li>Full Stack Radio [http://www.fullstackradio.com/]  - Adam Wathan does a great\njob putting together great topics and interviews in the web development\nscene.</li>\n<li>Syntax [https://syntax.fm/]  - Nice show for some quick tips and topics for\nthose that work for themselves in web development. Pretty laid back and\nrelatable show.</li>\n<li>DatCast [https://dat-cast.hashbase.io/]  - A look into the dat community and\nthe work going on in projects like the Beaker Browser. Only a few episodes.</li>\n</ul>\n<p>Christian</p>\n<ul>\n<li>Ask Pastor John [https://www.desiringgod.org/ask-pastor-john]  - Short\nsnippets of answers to questions that are asked of Pastor John Piper, author\nand speaker. Lots of deep and insightful material here.</li>\n<li>Marriage After God\n[https://marriageaftergod.com/category/marriage-after-god-podcast/]  - Just\nstarted to listening to this one, but it's a refreshing and relatable podcast\nabout marriage for a Christian from a couple. They are very open and honest\nabout their own struggles and failures.</li>\n<li>Courageous Parenting [https://courageousparenting.com/episodes/]  - This is\nprobably one of the most impactful podcasts that I've listened to recently.\nThere is so much sound advice and practical teaching and it comes straight\nfrom the Bible. The hosting couple is relatable and transparent.</li>\n<li>Sojourn Sermons [http://www.sojourntraverse.com/sermons/]  - Technically not\na podcast, but it's the church we attended in Traverse City and really love\nthe quality and gospel centeredness of Matt's sermons. Currently doing the\nseries on the book of James from 2015.</li>\n</ul>\n<p>Thinking Differently</p>\n<ul>\n<li>seanwes [https://seanwes.com/podcast/]  - Lots of great content about\nbuilding a business, having an impact and making a difference from Sean and\nBen. Been listening to their stuff for years.</li>\n<li>Office Hours [https://discoverpraxis.com/office-hours/]  - How to be your own\ncredential and not put all (or any) of your hope into a college degree. Lots\nof light hearted humor, but also packed with deep and insightful wisdom for\nmaking your career.</li>\n<li>Forward Tilt [https://open.spotify.com/show/1u1u8amAwS1zDZhqYOIg0w]  -\nLeaning into being the the person people want to hire. Small nuggets that are\neasy to listen in small sessions and the podcast is finished.</li>\n<li>Crash Podcast [https://crash.co/blog/tag/podcast/]  - Stories of how people\nhave crashed their careers in inventive and interesting ways.</li>\n</ul>","content":"I've been listening to a few podcasts in several different categories and wanted\nto share some of those with you.\n\nDevelopment\n\n\n * EmberMap [https://embermap.com/podcast]  - An Ember.js focused podcast with\n   hosts Sam and Ryan, where they talk about not only Ember.js, but product\n   development in general. Lots of insight here and always a fun listen.\n * The Frontside [https://frontside.io/podcast/]  - A podcast from the Frontside\n   consultancy which has historically been in the Ember.js community and\n   recently have released the Microstates.js library. This podcast recently did\n   a reboot, and I'm excited to hear more of that.\n * Build Your SaaS [https://saas.transistor.fm/]  - A podcast documenting the\n   journey that two co-founders are going down while building their SaaS\n   (Trasistor.fm, podcast hosting service). Real and insightful at the same\n   time.\n * Art of Product [https://open.spotify.com/show/4AFHekKU9OMJnS0GLSG5sX]  - The\n   journey of two startup founders n the process of building their products.\n   Lots of nuggets and just raw honesty regarding the challenges and successes\n   of being a founder and building good products.\n * Full Stack Radio [http://www.fullstackradio.com/]  - Adam Wathan does a great\n   job putting together great topics and interviews in the web development\n   scene.\n * Syntax [https://syntax.fm/]  - Nice show for some quick tips and topics for\n   those that work for themselves in web development. Pretty laid back and\n   relatable show.\n * DatCast [https://dat-cast.hashbase.io/]  - A look into the dat community and\n   the work going on in projects like the Beaker Browser. Only a few episodes.\n\nChristian\n\n\n * Ask Pastor John [https://www.desiringgod.org/ask-pastor-john]  - Short\n   snippets of answers to questions that are asked of Pastor John Piper, author\n   and speaker. Lots of deep and insightful material here.\n * Marriage After God\n   [https://marriageaftergod.com/category/marriage-after-god-podcast/]  - Just\n   started to listening to this one, but it's a refreshing and relatable podcast\n   about marriage for a Christian from a couple. They are very open and honest\n   about their own struggles and failures.\n * Courageous Parenting [https://courageousparenting.com/episodes/]  - This is\n   probably one of the most impactful podcasts that I've listened to recently.\n   There is so much sound advice and practical teaching and it comes straight\n   from the Bible. The hosting couple is relatable and transparent.\n * Sojourn Sermons [http://www.sojourntraverse.com/sermons/]  - Technically not\n   a podcast, but it's the church we attended in Traverse City and really love\n   the quality and gospel centeredness of Matt's sermons. Currently doing the\n   series on the book of James from 2015.\n\nThinking Differently\n\n\n * seanwes [https://seanwes.com/podcast/]  - Lots of great content about\n   building a business, having an impact and making a difference from Sean and\n   Ben. Been listening to their stuff for years.\n * Office Hours [https://discoverpraxis.com/office-hours/]  - How to be your own\n   credential and not put all (or any) of your hope into a college degree. Lots\n   of light hearted humor, but also packed with deep and insightful wisdom for\n   making your career.\n * Forward Tilt [https://open.spotify.com/show/1u1u8amAwS1zDZhqYOIg0w]  -\n   Leaning into being the the person people want to hire. Small nuggets that are\n   easy to listen in small sessions and the podcast is finished.\n * Crash Podcast [https://crash.co/blog/tag/podcast/]  - Stories of how people\n   have crashed their careers in inventive and interesting ways.","title":"What I'm Listening To","date":"2019-03-07T19:52:32.000Z"},"relationships":{"authors":{"data":[{"type":"authors","id":"ilya"}]},"tags":{"data":[{"type":"tags","id":"resources"}]}}}]}